image: cirrusci/flutter:3.32.4

stages:
  - auto-format
  - code-quality

auto-format:
  stage: auto-format
  script:
    - echo "üöÄ Starting auto-format process..."
    - flutter pub get
    
    # Apply auto-fixes
    - echo "üõ†Ô∏è Applying dart fix..."
    - dart fix --apply
    
    # Format code
    - echo "üìù Formatting code..."
    - dart format lib/ test/
    
    # Check for changes and commit if needed
    - |
      if [ -n "$(git status --porcelain)" ]; then
        echo "üì§ Changes detected, committing..."
        git config --global user.email "gitlab-ci@example.com"
        git config --global user.name "GitLab CI"
        git add .
        git commit -m "ü§ñ Auto-format: Apply dart fix and format code

        - Applied dart fix --apply
        - Formatted code with dart format
        
        [skip ci]"
        
        # Push changes back to the branch
        git push https://oauth2:${CI_PUSH_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git HEAD:${CI_COMMIT_REF_NAME}
        echo "üéâ Code has been automatically formatted and committed!"
      else
        echo "‚úÖ Code was already properly formatted!"
      fi
    
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^bugfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*/
  
  # Exclude this job if commit message contains [skip ci] to prevent infinite loops
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip ci\]/

code-quality:
  stage: code-quality
  script:
    - echo "üöÄ Starting code quality checks..."
    - flutter pub get
    
    # Step 1: Check auto-fixable issues (should be clean after auto-format stage)
    - echo "üõ†Ô∏è Checking for auto-fixable issues..."
    - dart fix --apply
    - |
      if [ -n "$(git status --porcelain)" ]; then
        echo "‚ùå Code still has auto-fixable issues after auto-format stage."
        echo "This should not happen. Please check the auto-format job."
        exit 1
      else
        echo "‚úÖ No auto-fixable issues found."
      fi
    
    # Step 2: Check code formatting (should be clean after auto-format stage)
    - echo "üìù Checking code formatting..."
    - |
      if ! dart format --set-exit-if-changed lib/ test/; then
        echo "‚ùå Code is not properly formatted after auto-format stage."
        echo "This should not happen. Please check the auto-format job."
        exit 1
      else
        echo "‚úÖ Code formatting is correct."
      fi
    
    # Step 3: Run static analysis
    - echo "üîç Running static analysis..."
    - |
      if ! flutter analyze --fatal-warnings; then
        echo "‚ùå Static analysis failed."
        echo "Please fix the analyzer warnings and errors."
        exit 1
      else
        echo "‚úÖ Static analysis passed."
      fi
    
    - echo "üéâ All code quality checks passed! Your code is ready for merge."
    
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"
    - if: $CI_COMMIT_BRANCH =~ /^feature\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^bugfix\/.*/
    - if: $CI_COMMIT_BRANCH =~ /^hotfix\/.*/